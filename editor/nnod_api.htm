<html>
<script type="text/javascript">
    var ws = null;
</script>

<body onload='load_completed()' onunload='if (ws != null) {ws.close();}'>
    <script type="text/javascript">
        window.addEventListener('beforeunload', function(event) {
            if (ws == null) return;
            if (ws.readyState == 1) ws.close();
        }, false);

        window.onbeforeunload = function() {
            if (ws == null) return;
            if (ws.readyState == 1) ws.close();
        }
        var env = "";
        var session_Id = "";
        var websocket_Server = window.location.origin.replace("http://", "ws://");
        var user_Id = '';
        var access_token = '';
        var ETX = String.fromCharCode(3);

        var callbackonOpen = function(msg) {};
        var callbackonClose = function(msg) {};
        var callbackonMessage = function(msg) {};
        var callbackonError = function(msg) {};
        var callbackonToken = function(msg) {};

        function ws_connect() {
            window.WebSocket = window.WebSocket || window.MozWebSocket;
            if (!window.WebSocket) {
                return;
            }
            try {
                ws = new WebSocket(websocket_Server);
            } catch (error) {
                return;
            }

            ws.onopen = WSonOpen;
            ws.onmessage = WSonMessage;
            ws.onclose = WSonClose;
            ws.onerror = WSonError;
            return;
        }

        function WSonOpen() {
            ws.send("Session_Id=" + session_Id);
            setInterval(function() {
                if (ws.readyState == 1) {
                    ws.send("PING")
                }
            }, 60000);
            callbackonOpen('CONNECTED.');
        }

        function WSonMessage(message) {
            callbackonMessage(message.data)
        }

        function WSonError(error) {
            callbackonError("ERROR 1. " + error)
        }

        function WSonClose() {
            try {
                ws.close();
            } catch (Error) {}
        }

        /////////// EXTERNAL CALLS ////////////////////

        function ext_close(msg) {
            try {
                if (msg) {
                    ws.send("COMMAND" + ETX + "DISCONNECT");
                    ws.send(msg);
                }
                ws.close();
            } catch (Error) {}
        }

        function ext_send(msg) {
            ws.send(msg);
        }

        function ext_init(p_user_Id, p_access_token, p_session_Id, p_websocket_Server) {
            try {
                if (ws.readyState == 1) return;
            } catch (ERROR) {};
            if (p_user_Id) user_Id = p_user_Id;
            if (p_access_token) access_token = p_access_token;
            if (p_session_Id) session_Id = p_session_Id;
            if (p_websocket_Server) websocket_Server = p_websocket_Server;
            ws_connect();
            return ws.readyState;
        }

        function load_completed() {
            var arg1 = 'env';
            var url = window.location.href;
            arg1 = arg1.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + arg1 + "(=([^&#]*)|&|#|$)");
            results = regex.exec(url);
            if (!results || !results[2]) env = null;
            env = decodeURIComponent(results[2].replace(/\+/g, " "));
            set_env();
            callbackonLoad("Loaded. ");
        }

        function set_env() {
            if (env == 'web') {
                callbackonOpen = function(msg) {
                    parent.ws_onOpen(msg)
                };
                callbackonClose = function(msg) {
                    parent.ws_onClose(msg)
                };
                callbackonMessage = function(msg) {
                    parent.ws_onMessage(msg)
                };
                callbackonError = function(msg) {
                    parent.ws_onError(msg)
                };
                callbackonToken = function(msg) {
                    parent.ws_onToken(msg)
                };
                callbackonLoad = function(msg) {
                    parent.ws_onLoad(msg)
                };
            }
            if (env == 'ios') {
                callbackonOpen = function(msg) {
                    webkit.messageHandlers.onOpen.postMessage(msg)
                };
                callbackonClose = function(msg) {
                    webkit.messageHandlers.onClose.postMessage(msg)
                };
                callbackonMessage = function(msg) {
                    webkit.messageHandlers.onMessage.postMessage(msg)
                };
                callbackonError = function(msg) {
                    webkit.messageHandlers.onError.postMessage(msg)
                };
                callbackonToken = function(msg) {
                    webkit.messageHandlers.onToken(msg)
                };
                callbackonLoad = function(msg) {
                    webkit.messageHandlers.onLoad.postMessage(msg)
                };
            }
            if (env == 'android') {
                callbackonOpen = function(msg) {
                    Android.callbackOnOpen(msg)
                };
                callbackonClose = function(msg) {
                    Android.callbackOnClose(msg)
                };
                callbackonMessage = function(msg) {
                    Android.callbackOnMessage(msg)
                };
                callbackonError = function(msg) {
                    Android.callbackOnError(msg)
                };
                callbackonToken = function(msg) {
                    Android.callbackOnToken(msg)
                };
                callbackonLoad = function(msg) {
                    Android.callbackOnLoad(msg)
                };
            }
        }
    </script>
</body>

</html>