<!doctype html>
<html>

<head>
    <title>NNOD Dialog Editor</title>

    <script type="text/javascript" src="jquery.min.js"></script>
    <script type="text/javascript" src="qrcode.js"></script>
    <script type="text/javascript" src="js/vis.js"></script>
    <link href="nnod_editor.css" rel="stylesheet" type="text/css" />
</head>

<body onload="Page_Loaded();">
    <img src="img/256gl.png" height="80" width="380" style="position: absolute; top: 0px; left: 50px;">

    <div id="shapes">
        <img id="starter" src="img/starter.png" height="60" width="60" style="position: absolute; top: 20px; left: 10px; 
        border-color: rgb(231, 167, 167); " onmouseover="over_image(this);" onmouseout="out_image(this);" onmouseup="click_on_image(this);">
        <img id="prompt" src="img/prompt.png" height="60" width="60" style="position: absolute; top: 90px; left: 10px; border-color: rgb(211, 209, 209);" onmouseover="over_image(this);" onmouseout="out_image(this);" onmouseup="click_on_image(this);">
        <img id="sema" src="img/sema.png" height="60" width="60" style="position: absolute; top: 160px; left: 10px; border-color: rgb(169, 231, 167);" onmouseover="over_image(this);" onmouseout="out_image(this);" onmouseup="click_on_image(this);">
        <img id="trigger" src="img/trigger.png" height="60" width="60" style="position: absolute; top: 240px; left: 10px; border-color: rgb(253, 47, 47);" onmouseover="over_image(this);" onmouseout="out_image(this);" onmouseup="click_on_image(this);">
    </div>

    <div id="nodes"></div>

    <div id="qrcode" style="position:absolute; left:3pt; bottom:15pt; "></div>

    <div id='input_group' style="position:absolute; right:25pt; top:25pt; ">
        <strong>Question:</strong><br>
        <input type='text' id='qId' size='40' value='' />
        <button style='position: relative;' onClick='ws_send_Q();'>OK</button>
    </div>

    <script type="text/javascript">
        var nodes = null;
        var edges = null;
        var network_of_nodes = null;
        var exportValue = null;
        var resizeTimeOut;
        var get_Neurons_Url = "/get_neurons.php";
        var get_Nerves_Url = "/get_nerves.php";
        var neurons = null;
        var nevres = null;
        var current_shape = null;
        var shapes = {
            "starter": "ellipse",
            "prompt": "box",
            "sema": "circle",
            "trigger": "star"
        };
        var shapes_colors = {
            "starter": "#FADBD8",
            "prompt": "#E5E7E9",
            "sema": "#A9DFBF",
            "trigger": "#C5000B"
        };

        var container_of_nodes = document.getElementById('nodes');
        var options_nodes = null;
        var data_nodes = null;

        var userId = 'Guest';
        var token = '1f6601c5-05b8-4da5-9774-ea7362a8fa2e';
        var header = 'nnod://chat/'
        var session_id = '123';
        var ETX = String.fromCharCode(3);
        var ws_Server = 'ws://256gl.com:55438';
        var qrcode = new QRCode(document.getElementById("qrcode"), {
            width: 80,
            height: 80
        });

        function draw() {
            data_nodes = {
                nodes: nodes,
                edges: edges
            };

            options_nodes = {
                nodes: {
                    shape: 'circle'
                },
                edges: {
                    color: 'gray',
                    smooth: false,
                    arrows: {
                        to: {
                            enabled: true,
                            scaleFactor: 1,
                            type: 'arrow'
                        }
                    }
                },
                groups: {
                    starter: {
                        shape: 'ellipse',
                        color: '#FADBD8'
                    },
                    prompt: {
                        shape: 'box',
                        color: '#E5E7E9'
                    },
                    sema: {
                        shape: 'circle',
                        color: '#A9DFBF'
                    },
                    triggers: {
                        shape: 'star',
                        color: '#C5000B'
                    }
                },
                physics: {
                    enabled: false
                },
                interaction: {
                    hover: true,
                    zoomView: true
                },
                manipulation: {
                    enabled: true,
                    addNode: function(nodeData, callback) {
                        if (current_shape == null) {
                            alert("Please select shape of the node!")
                            return;
                        }
                        nodeData.shape = shapes[current_shape];
                        nodeData.color = shapes_colors[current_shape];
                        nodeData.label = current_shape;
                        callback(nodeData);
                    }
                },
                layout: {
                    randomSeed: 0
                        // hierarchical: {
                        //     direction: 'UD',
                        //     sortMethod: 'directed'
                        // }
                }
            };
            network_of_nodes = new vis.Network(container_of_nodes, data_nodes, options_nodes);

            network_of_nodes.on("click", function(params) {
                // var nodes = objectToArray(network_of_nodes.getPositions());
                // nodes.forEach(addConnections);
                // exportValue = JSON.stringify(nodes, undefined, 2);

            });
            network_of_nodes.on("doubleClick", function(params) {
                params.event = "[original event]";
                // document.getElementById('eventSpan').innerHTML = '<h2>doubleClick event:</h2>' + JSON.stringify(params, null, 4);
                alert(JSON.stringify(params, null, 4))
            });

            network_of_nodes.on("select", function(params) {
                //               console.log('select Event:', params);
            });

            network_of_nodes.on("selectNode", function(params) {
                // network_of_nodes.clustering.updateClusteredNode(params.nodes[0], 
                // {
                //     shape: current_shape
                // });
            });
        }

        window.onresize = function(event) {
            event.stopPropagation();
            event.preventDefault();
            clearTimeout(resizeTimeOut);
            resizeTimeOut = setTimeout(Redraw, 500);
            return false;
        };

        function Page_Loaded() {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", get_Neurons_Url, false);
            xmlHttp.send(null);
            neurons = xmlHttp.responseText;
            xmlHttp.open("GET", get_Nerves_Url, false);
            xmlHttp.send(null);
            nevres = xmlHttp.responseText;
            var a_neurons = neurons.split("\n");
            var a_nerves = nevres.split("\n");

            nodes = new vis.DataSet();
            a_neurons.forEach(function(element) {
                var parts = element.split("\t");
                if (parts.length < 5) {
                    return;
                }
                var grp = parts[2].toLowerCase();
                if (grp == "question") grp = "prompt";
                nodes.add({
                    id: parts[0],
                    group: grp,
                    label: parts[3],
                    x: parts[4],
                    y: parts[5]
                });
            })
            edges = new vis.DataSet();
            a_nerves.forEach(function(element) {
                var parts = element.split("\t");
                if (parts.length < 3) {
                    return;
                }
                edges.add({
                    id: parts[0],
                    from: parts[1],
                    to: parts[2]
                });
            })

            //     alert(nevres);

            Init_Draw();
        }

        function Init_Draw() {

            qrcode.makeCode(header + "ws=" + ws_Server + "&session_id=" + session_id);
            var mynetwork = document.getElementById('nodes');
            var x1 = window.innerWidth - 100;
            var y1 = window.innerHeight - 120;
            mynetwork.style.width = x1 + "px";
            mynetwork.style.height = y1 + "px";
            mynetwork.style.left = "90px";
            draw();
        }

        function Redraw() {
            var mynetwork = document.getElementById('nodes');
            var x1 = window.innerWidth - 100;
            var y1 = window.innerHeight - 120;
            mynetwork.style.width = x1 + "px";
            mynetwork.style.height = y1 + "px";
            mynetwork.style.left = "90px";

            //            network_of_nodes = new vis.Network(container_of_nodes, data_nodes, options_nodes);
        };

        function objectToArray(obj) {
            return Object.keys(obj).map(function(key) {
                obj[key].id = key;
                return obj[key];
            });
        }

        function addConnections(elem, index) {
            var arr = [];
            edges.forEach(function(element) {
                if (element.from == elem.id) {
                    arr.push(element.to);
                }
            });
            elem.connections = arr;
        }

        function getNodeData(data) {
            var networkNodes = [];
            data.forEach(function(elem, index, array) {
                networkNodes.push({
                    id: elem.id,
                    label: elem.id,
                    x: elem.x,
                    y: elem.y
                });
            });
            return new vis.DataSet(networkNodes);
        }

        function getNodeById(data, id) {
            for (var n = 0; n < data.length; n++) {
                if (data[n].id == id) {
                    return data[n];
                }
            };
            throw 'Can not find id \'' + id + '\' in data';
        }

        function getEdgeData(data) {
            var networkEdges = [];
            data.forEach(function(node) {
                node.connections.forEach(function(connId, cIndex, conns) {
                    networkEdges.push({
                        from: node.id,
                        to: connId
                    });
                    let cNode = getNodeById(data, connId);

                    var elementConnections = cNode.connections;
                    var duplicateIndex = elementConnections.findIndex(function(connection) {
                        return connection == node.id;
                    });
                    if (duplicateIndex != -1) {
                        elementConnections.splice(duplicateIndex, 1);
                    };
                });
            });
            return new vis.DataSet(networkEdges);
        }

        function over_image(obj) {
            if (current_shape != null) return;
            if (obj.border != "4") {
                obj.border = "2"
            }
        };

        function out_image(obj) {
            if (current_shape != null) return;
            if (obj.border != "4") {
                obj.border = "0"
            }
        };

        function click_on_image(obj) {
            document.getElementById('starter').border = "0";
            document.getElementById('prompt').border = "0";
            document.getElementById('sema').border = "0";
            document.getElementById('trigger').border = "0";
            if (current_shape == obj.id) {
                current_shape = null;
                return;
            }
            obj.border = "4"
            current_shape = obj.id;
        };

        function ws_send_Q() {
            msg = document.getElementById('qId').value;
            // div.innerHTML = div.innerHTML + "<font color='blue'>" + msg + '</font><br>';
            // ws_iframe_api.ext_send(userId + ETX + msg);
            document.getElementById('qId').value = "";
        };
    </script>

</body>

</html>