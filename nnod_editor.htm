<!doctype html>
<html>

<head>
    <title>NNOD Dialog Editor</title>

    <style type="text/css">
        table.view {
            width: 90%;
            position: absolute
        }
        
        #network {
            width: 100%;
            height: 600px;
            border: 1px solid lightgray;
        }
    </style>

    <script type="text/javascript" src="js/vis.js"></script>
    <link href="js/vis-network.min.css" rel="stylesheet" type="text/css" />

    <script type="text/javascript">
        var nodes = null;
        var edges = null;
        var network = null;
        var current_shape = 'square'
        var shapes = [1000, 1001, 1002, 1003, 1004];

        var LENGTH_MAIN = 350,
            LENGTH_SERVER = 150,
            LENGTH_SUB = 50,
            WIDTH_SCALE = 1,
            GREEN = 'green',
            RED = '#C5000B',
            ORANGE = 'orange',
            GRAY = 'gray',
            BLACK = '#2B1B17';


        // convenience method to stringify a JSON object
        function toJSON(obj) {
            return JSON.stringify(obj, null, 4);
        }

        function draw() {
            nodes = new vis.DataSet();


            var mynetwork = document.getElementById('network');
            var x = -mynetwork.clientWidth / 2 - 250;
            var y = -mynetwork.clientHeight / 2 - 120;
            var step = 120;

            nodes.add({
                id: 1000,
                x: x,
                y: y,
                label: 'Starter',
                group: 'starters',
                value: 1,
                fixed: true,
                physics: false
            });
            nodes.add({
                id: 1001,
                x: x,
                y: y + step,
                label: 'Semaphore',
                group: 'semaphores',
                value: 1,
                fixed: true,
                physics: false
            });
            nodes.add({
                id: 1002,
                x: x,
                y: y + 2 * step,
                label: 'Prompt',
                group: 'prommpts',
                value: 1,
                fixed: true,
                physics: false
            });
            nodes.add({
                id: 1003,
                x: x,
                y: y + 3 * step,
                label: 'Trigger',
                group: 'triggers',
                value: 1,
                fixed: true,
                physics: false
            });


            nodes.add([{
                id: '1',
                label: 'Node 1'
            }, {
                id: '2',
                label: 'Node 2'
            }, {
                id: '3',
                label: 'Node 3'
            }, {
                id: '4',
                label: 'Node 4'
            }, {
                id: '5',
                label: 'Node 5'
            }]);

            // create an array with edges
            edges = new vis.DataSet();

            edges.add([{
                id: '1',
                from: '1',
                to: '2'
            }, {
                id: '2',
                from: '1',
                to: '3'
            }, {
                id: '3',
                from: '2',
                to: '4'
            }, {
                id: '4',
                from: '2',
                to: '5'
            }]);

            // create a network
            var container = document.getElementById('network');
            var data = {
                nodes: nodes,
                edges: edges
            };

            var options = {
                nodes: {
                    shape: 'dot'
                },
                edges: {
                    color: GRAY,
                    smooth: false
                },
                groups: {
                    starters: {
                        shape: 'ellipse',
                        color: '#FF9900' // orange
                    },
                    semaphores: {
                        shape: 'dot',
                        color: "#2B7CE9" // blue
                    },
                    prommpts: {
                        shape: 'square',
                        color: "#5A1E5C" // purple
                    },
                    triggers: {
                        shape: 'star',
                        color: "#C5000B" // red
                    }
                },
                physics: {
                    enabled: false
                },
                interaction: {
                    hover: true,
                    zoomView: false
                },
                manipulation: {
                    enabled: true
                },
                layout: {
                    randomSeed: 0
                }
            };





            network = new vis.Network(container, data, options);


            network.on("click", function(params) {
                // params.event = "[original event]";
                // document.getElementById('eventSpan').innerHTML = '<h2>Click event:</h2>' + JSON.stringify(params, null, 4);
                // console.log('click event, getNodeAt returns: ' + this.getNodeAt(params.pointer.DOM));
            });
            network.on("doubleClick", function(params) {
                // params.event = "[original event]";
                // document.getElementById('eventSpan').innerHTML = '<h2>doubleClick event:</h2>' + JSON.stringify(params, null, 4);
            });

            network.on("select", function(params) {
                console.log('select Event:', params);
            });

            network.on("selectNode", function(params) {
                console.log('selectNode Event:', params);
                if (params.nodes[0] >= 1000 && params.nodes[0] <= 1004) {
                    current_shape = network.clustering.body.nodes[params.nodes[0]].shape.constructor.name.toLowerCase();
                };
                network.clustering.updateClusteredNode(params.nodes[0], {
                    shape: current_shape
                });

            });
        }
        var resizeId;

        function Page_Resized() {
            clearTimeout(resizeId);
            resizeId = setTimeout(Redraw, 500);
        };

        function Redraw() {
            var mynetwork = document.getElementById('network');
            var x = mynetwork.clientWidth;
            var y = mynetwork.clientHeight;
            alert(x + " " + y)
            draw();
        };
    </script>

</head>

<body onload="draw();" onResize="Page_Resized();return false;">

    <div id="Triggers" style="display:none;">content will be loaded here</div>


    <img src="js/img/256gl.png" height="80" width="450">

    <table class="view">
        <tr>
            <td>
                <div id="network"></div>
            </td>
        </tr>
    </table>

</body>

</html>